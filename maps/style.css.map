{"version":3,"sources":["style.scss","../node_modules/sass-toolkit/stylesheets/toolkit/_intrinsic-ratio.scss","../node_modules/sass-toolkit/stylesheets/toolkit/_settings.scss"],"names":[],"mappings":"AAGA,gBCSI,kBACA,SA4BF,mBACA,UCtB6B,CFjB/B,kBCuBI,cACA,kBACA,sBACA,uBACA,MACA,SACA,SAAU,CDxBd,EACE,qBAAsB,CACvB,KAGC,cAAe,CAChB,QAGC,kBAAmB,CACpB,MAGC,wBAAyB,CAC1B,SAGC,wBAAyB,CAC1B,QAGC,wBAAyB,CAC1B,OAGC,YAAa,CACd,eAGC,iBAAA,AACA,aAAA,cACA,yDAIU,CAPZ,uBAUI,gBAAiB,CAVrB,qBAaI,iBAAkB,CAbtB,wBAgBI,iBAAkB,CAhBtB,uBAmBI,gBAAiB,CAClB,0BAID,eACE,yBAAA,AACA,8BAAA,qEAGiB,CAClB,CAGH,eACE,oBAAA,AACA,oBADA,AACA,aAAA,4BAAA,AACA,6BADA,AACA,0BADA,AACA,sBAAA,uBAAA,AAAsB,oBAAtB,AAAsB,qBAAA,CAHxB,uBAMI,oBAAA,AAAa,oBAAb,AAAa,YAAA,CANjB,gCASM,mBAAA,AAAO,WAAP,AAAO,MAAA,CATb,6BAaM,mBAAA,AAAO,WAAP,AAAO,MAAA,CACR","file":"../sass/style.css","sourcesContent":["// @import 'toolkit/reset';\n@import 'toolkit';\n\n.flexible-video {\n  @include ir;\n}\n\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-size: 24px;\n}\n\n.header {\n  background: #f5deb3;\n}\n\n.main {\n  background-color: #bdb76b;\n}\n\n.sidebar {\n  background-color: #dcdcdc;\n}\n\n.footer {\n  background-color: #8fbc8f;\n}\n\n.panel {\n  padding: .5em;\n}\n\n.wrapper--grid {\n  display: grid;\n  grid-gap: 20px;\n  grid-template-areas:\n    'header'\n    'content'\n    'sidebar'\n    'footer';\n\n  .header {\n    grid-area: header;\n  }\n  .main {\n    grid-area: content;\n  }\n  .sidebar {\n    grid-area: sidebar;\n  }\n  .footer {\n    grid-area: footer;\n  }\n}\n\n@media (min-width: 550px) {\n  .wrapper--grid {\n    grid-template-columns: 1fr 2fr;\n    grid-template-areas:\n      'header header'\n      'sidebar content'\n      'footer footer';\n  }\n}\n\n.wrapper--flex {\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n\n  .flex-2 {\n    display: flex;\n\n    .sidebar {\n      flex: 1;\n    }\n\n    .main {\n      flex: 3;\n    }\n  }\n}\n","////////////////////////\n// Fluid Embeds and whatever WITH NO JAVASCIPT!\n////////////////////////\n@mixin intrinsic-ratio-parent($extend: null) {\n  $extend: if($extend != null, $extend, toolkit-get('intrinsic ratio extend'));\n\n  @if $extend {\n    @include dynamic-extend('intrinsic ratio parent') {\n      @include intrinsic-ratio-parent(false);\n    }\n  }\n  @else {\n    position: relative;\n    height: 0;\n  }\n}\n\n@mixin intrinsic-ratio-child($extend: null) {\n  $extend: if($extend != null, $extend, toolkit-get('intrinsic ratio extend'));\n\n  @if $extend {\n    @include dynamic-extend('intrinsic ratio child') {\n      @include intrinsic-ratio-child(false);\n    }\n  }\n  @else {\n    display: block;\n    position: absolute;\n    width: 100% !important; // Nuke the external styles\n    height: 100% !important; // Nuke the external styles\n    top: 0;\n    margin: 0;\n    padding: 0;\n  }\n}\n\n@mixin intrinsic-ratio-ratio($ratio: null, $width: null, $position: null) {\n  $ratio: if($ratio != null, $ratio, toolkit-get('intrinsic ratio'));\n  $width: if($width != null, $width, toolkit-get('intrinsic ratio width'));\n  $position: if($position != null, $position, toolkit-get('intrinsic ratio position'));\n\n  padding-#{$position}: (1 / $ratio) * $width;\n  width: $width;\n}\n\n@mixin intrinsic-ratio($ratio: null, $width: null, $elements: null, $position: null, $extend: null) {\n  $ratio: if($ratio != null, $ratio, toolkit-get('intrinsic ratio'));\n  $width: if($width != null, $width, toolkit-get('intrinsic ratio width'));\n  $elements: if($elements != null, $elements, toolkit-get('intrinsic ratio elements'));\n  $position: if($position != null, $position, toolkit-get('intrinsic ratio position'));\n  $extend: if($extend != null, $extend, toolkit-get('intrinsic ratio extend'));\n\n  @include intrinsic-ratio-parent($extend);\n\n  @include intrinsic-ratio-ratio($ratio, $width, $position);\n\n  @each $element in $elements {\n    #{$element} {\n    \t@include intrinsic-ratio-child($extend);\n    }\n  }\n}\n\n@mixin ir($ratio: null, $width: null, $elements: null, $position: null, $extend: null) {\n  @include intrinsic-ratio($ratio, $width, $elements, $extend, $position);\n}\n\n@mixin ir-ratio($ratio: null, $width: null, $position: null) {\n  @include intrinsic-ratio-ratio($ratio, $width, $position);\n}","//////////////////////////////\n// Toolkit Settings\n//////////////////////////////\n$Toolkit-Settings: (\n  'clearfix extend': false,\n  'color stack amounts': 25% 50% 75% 85% 90%,\n  'tint shade amounts': 75% 50% 25%,\n  'tint color': #fff,\n  'shade color': #000,\n  'color scale steps': 6,\n  'ligature extend': false,\n  'font face weight': normal,\n  'font face style': normal,\n  'font face inline woff': false,\n  'icon font extend': false,\n  'icon font speak': false,\n  'fade in duration': 1s,\n  'fade in loading class': '.wf-loading',\n  'fade in extend': false,\n  'intrinsic ratio': 16/9,\n  'intrinsic ratio width': 100%,\n  'intrinsic ratio elements': '> *',\n  'intrinsic ratio position': top,\n  'intrinsic ratio extend': false,\n  'nested context contexts': 100%,\n  'nested context position': left,\n  'triangle color': #000,\n  'triangle height': 1em,\n  'triangle width': 1em,\n  'triangle angle': 0,\n  'parallax perspective': 1,\n  'parallax element': 'body',\n  'parallax ios': true,\n  'parallax distance': 0,\n  'vertical midpoint': 50%,\n  'vertical extend': false,\n  'horizontal midpoint': 0%,\n  'horizontal fixed midpoint': 50%,\n  'horizontal fixed': false,\n  'horizontal extend': false,\n  'absolute center vertical midpoint': 50%,\n  'absolute center horizontal midpoint': 0%,\n  'absolute center fixed horizontal midpoint': 50%,\n  'absolute center fixed': false,\n  'absolute center extend': false,\n  'underline background': #fff,\n  'underline color': #00e,\n  'underline clear descenders': true,\n  'underline distance': 1,\n  'underline width': 2,\n  'underline extend': false,\n  'art pixel size': 1px,\n  'art color': black,\n  'art border radius': 0%\n);\n\n//////////////////////////////\n// New Settings module\n//////////////////////////////\n// Global\n$GlobalSettings: $Toolkit-Settings !default;\n// User\n$UserSettings: () !default;\n\n//////////////////////////////\n// User Setting Exists\n//////////////////////////////\n@function user-setting-exists($setting) {\n  @if map-has-key($UserSettings, $setting) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n@function user-setting-exists-multiple($settings...) {\n  $Return: ();\n  @each $setting in $settings {\n    $Return: map-merge($Return, ($setting: user-setting-exists($setting)));\n  }\n  @return $Return;\n}\n\n// Toolkit Version\n@function toolkit-has($setting) {\n  @return user-setting-exists($setting);\n}\n\n//////////////////////////////\n// Setting Get\n//////////////////////////////\n@function setting-get($setting) {\n  @if user-setting-exists($setting) {\n    @return map-get($UserSettings, $setting);\n  }\n  @else {\n    @return map-get($GlobalSettings, $setting);\n  }\n}\n\n@function setting-get-multiple($settings...) {\n  $values: ();\n  @each $setting in $settings {\n    $values: map-merge($values, ($setting: setting-get($setting)));\n  }\n  @return $values;\n}\n\n// Toolkit Version\n@function toolkit-get($setting) {\n  @return setting-get($setting);\n}\n\n\n//////////////////////////////\n// Settings Set\n//////////////////////////////\n@function setting-set($setting, $value) {\n  $UserSettings: map-merge($UserSettings, ($setting: $value)) !global;\n  @return true;\n}\n\n@function setting-set-multiple($settings) {\n  $UserSettings: map-merge($UserSettings, $settings) !global;\n  @return true;\n}\n\n@mixin setting-set($setting, $value) {\n  $setting-setter: setting-set($setting, $value) !global;\n}\n\n@mixin setting-change($setting, $value) {\n  @include setting-set($setting, $value);\n}\n\n@mixin setting-set-multiple($settings) {\n  $setting-setter: setting-set-multiple($settings) !global;\n}\n\n@mixin setting-change-multiple($settings) {\n  @include setting-set-multiple($settings);\n}\n\n// Toolkit Version\n@function toolkit-set($setting, $value) {\n  @return setting-set($setting, $value);\n}\n\n@mixin toolkit-change($setting, $value) {\n  @include setting-set($setting, $value);\n}\n\n@mixin toolkit-set($setting, $value) {\n  @include setting-set($setting, $value);\n}\n\n//////////////////////////////\n// Remove Setting\n//////////////////////////////\n@function setting-clear($setting) {\n  $Return: ();\n\n  @each $Key, $Value in $UserSettings {\n    $Return: if($setting == $Key, $Return, map-merge($Return, ($Key: $Value)));\n  }\n\n  $UserSettings: $Return !global;\n  @return true;\n}\n\n@function setting-clear-multiple($settings...) {\n  @each $setting in $settings {\n    $clear-the-settings: setting-clear($setting);\n  }\n  @return true;\n}\n\n@function setting-reset() {\n  $UserSettings: () !global;\n  @return true;\n}\n\n@mixin setting-clear($setting) {\n  $setting-clearer: setting-clear($setting);\n}\n\n@mixin setting-clear-multiple($settings...) {\n  $setting-clearer: setting-clear-multiple($settings);\n}\n\n@mixin setting-reset() {\n  $setting-clearer: setting-reset();\n}\n\n// Toolkit Version\n@function toolkit-reset($setting) {\n  @return setting-clear($setting);\n}\n\n@mixin toolkit-reset($setting) {\n  @include setting-clear($setting);\n}\n\n//////////////////////////////\n// Setting Pick\n//////////////////////////////\n@function setting-pick($setting, $input) {\n  @return if($input != null, $input, setting-get($setting));\n}\n\n@function setting-pick-multiple($settings) {\n  $Return: ();\n  @each $setting, $input in $settings {\n    $Return: map-merge($Return, ($setting: setting-pick($input, $setting)));\n  }\n\n  @return $Return;\n}"]}